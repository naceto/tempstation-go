// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
)

type SensorType string

const (
	SensorTypeDht11 SensorType = "dht11"
	SensorTypeDht22 SensorType = "dht22"
)

func (e *SensorType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SensorType(s)
	case string:
		*e = SensorType(s)
	default:
		return fmt.Errorf("unsupported scan type for SensorType: %T", src)
	}
	return nil
}

type NullSensorType struct {
	SensorType SensorType
	Valid      bool // Valid is true if SensorType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSensorType) Scan(value interface{}) error {
	if value == nil {
		ns.SensorType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SensorType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSensorType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SensorType), nil
}

type ClimateDatum struct {
	ID          int64
	SensorID    sql.NullInt64
	Temperature sql.NullString
	Humidity    sql.NullString
	ReadingTime sql.NullTime
}

type Sensor struct {
	ID         int64
	UserID     sql.NullInt64
	Name       string
	Type       SensorType
	MacAddress string
}

type User struct {
	ID    int64
	Name  sql.NullString
	Email sql.NullString
}
